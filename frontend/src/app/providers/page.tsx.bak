"use client";
import React from "react";

type Provider = {
  id: string;
  name: string;
  website?: string;
  api?: boolean;
  affiliate?: boolean;
};

async function fetchProviders(): Promise<Provider[]> {
  const base = process.env.NEXT_PUBLIC_API_BASE_URL ?? "";
  const res = await fetch(`${base}/api/v1/providers`, { cache: "no-store" });
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  return (await res.json()) as Provider[];
}

function validateProvidersShape(list: unknown[]): string[] {
  const errs: string[] = [];
  list.forEach((p, i) => {
    const row = p as Partial<Provider>;
    if (typeof row.id !== "string" || !row.id) errs.push(`row ${i}: missing id`);
    if (typeof row.name !== "string" || !row.name) errs.push(`row ${i}: missing name`);
  });
  return errs;
}

export default function ProvidersPage() {
  const [error, setError] = React.useState<string | null>(null);
  const [loading, setLoading] = React.useState(true);
  const [server, setServer] = React.useState<Provider[]>([]);

  React.useEffect(() => {
    let cancelled = false;
    (async () => {
      try {
        setLoading(true);
        setError(null);

        const list = await fetchProviders();
        if (!cancelled) setServer(list.length ? list : []);

        const shapeIssues = validateProvidersShape(list);
        if (shapeIssues.length && !cancelled) {
          setError(
            `Validation issues: ${shapeIssues.slice(0, 3).join("; ")}${
              shapeIssues.length > 3 ? "…" : ""
            }`
          );
        }
      } catch (e: unknown) {
        const msg =
          typeof e === "string" ? e : (e as Error)?.message ?? "Failed to load providers";
        if (!cancelled) setError(msg);
      } finally {
        if (!cancelled) setLoading(false);
      }
    })();
    return () => {
      cancelled = true;
    };
  }, []);

  if (loading) return <div className="p-6">Loading…</div>;
  if (error) return <div className="p-6 text-red-600">Error: {error}</div>;

  return (
    <div className="p-6 space-y-4">
      <h1 className="text-2xl font-semibold">Providers</h1>
      {server.length === 0 ? (
        <p>No providers returned.</p>
      ) : (
        <ul className="grid grid-cols-1 md:grid-cols-2 gap-3">
          {server.map((p) => (
            <li key={p.id} className="rounded-xl border p-3">
              <div className="flex items-center justify-between">
                <span className="font-medium">{p.name}</span>
                <span className="text-xs text-gray-500">{p.id}</span>
              </div>
              {p.website ? (
                <a
                  className="text-sm underline text-blue-600"
                  href={p.website}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  Website
                </a>
              ) : null}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
