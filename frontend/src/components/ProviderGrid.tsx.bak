"use client";
import React from "react";
import ProviderCard from "./ProviderCard";
import { getProviderLabel } from "@/lib/providerUtils";
import { PROVIDERS } from "@/lib/providers";
import type { Provider as ProviderType } from "@/lib/providers";
import type { RemoteProvider } from '@/lib/api';

type Props = {
  /** List of providers to render. Defaults to PROVIDERS from the registry. */
  items?: ProviderType[] | RemoteProvider[];
  /** Called when a provider is selected (or null when closed) */
  onSelect?: (p: ProviderType | RemoteProvider | null) => void;
  /** Optionally open a provider by id on mount */
  initialId?: string;
  /** Optional filter: 'all' or id/key/kind or substring match of displayName */
  filter?: string;
};

export default function ProviderGrid({ items = PROVIDERS, onSelect, initialId, filter = "all" }: Props) {
  const [selected, setSelected] = React.useState<ProviderType | RemoteProvider | null>(null);

  const handleSelect = React.useCallback(
    (p: ProviderType | RemoteProvider) => {
      setSelected(p);
      onSelect?.(p);
    },
    [onSelect]
  );

  // If an initialId was provided, open that provider once items are available
  React.useEffect(() => {
    if (!initialId) return;
    const list = items ?? PROVIDERS;
    const found = list.find((x: any) => x?.id === initialId);
    if (found) {
      setSelected(found as any);
      onSelect?.(found as any);
    }
  }, [initialId, items, onSelect]);

  // defensive filtering
  const visible = React.useMemo(() => {
    const list = items ?? PROVIDERS;
    if (!filter || filter === "all") return list;
    const query = filter.toLowerCase();
    return list.filter((x: any) => {
      if (!x) return false;
      if (String(x.id || "").toLowerCase() === query) return true;
      if (String(x.key || "").toLowerCase() === query) return true;
      if (String(x.kind || "").toLowerCase() === query) return true;
      if (String(x.displayName || x.name || "").toLowerCase().includes(query)) return true;
      return false;
    });
  }, [items, filter]);

  return (
    <div>
      <ul className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
        {visible.map((p: any) => (
          <li key={p.id ?? p.key}>
            <button type="button" onClick={() => handleSelect(p)} className="w-full text-left">
              <ProviderCard p={p} />
            </button>
          </li>
        ))}
      </ul>

      {selected ? (
        <div className="mt-4 rounded border bg-white p-4 shadow-sm">
          <div className="flex items-start justify-between">
            <h3 className="text-lg font-semibold">{getProviderLabel(selected)}</h3>
            <button
              aria-label="Close provider details"
              onClick={() => {
                setSelected(null);
                onSelect?.(null);
              }}
              className="text-sm text-gray-600"
            >
              Close
            </button>
          </div>

          <pre className="mt-3 max-h-60 overflow-auto whitespace-pre-wrap text-sm text-gray-800">
            {JSON.stringify(selected, null, 2)}
          </pre>
        </div>
      ) : null}
    </div>
  );
}
